{"ast":null,"code":"import _asyncToGenerator from \"D:/MailBox/FrontEnd/MailBox/MailboxApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as signalR from '@microsoft/signalr';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-toastr\";\nimport * as i2 from \"./user-context.service\";\nexport class SignalrService {\n  constructor(toastrService, userContextService) {\n    this.toastrService = toastrService;\n    this.userContextService = userContextService;\n    this.userID = this.userContextService.user$._value.id;\n    this.email = this.userContextService.user$._value.email;\n    this.hubConnection = new signalR.HubConnectionBuilder().withUrl('http://localhost:5261/mailHub', {\n      skipNegotiation: true,\n      transport: signalR.HttpTransportType.WebSockets\n    }).build();\n    this.startSignalRConnection();\n  }\n  //  async ngOnInit(): Promise<void>\n  //   {\n  //   // Call the API service function when the app component initializes\n  //     try\n  //      {\n  //       await this.startSignalRConnection();\n  //      }\n  //     catch (error)\n  //      {\n  //       console.error('Error starting SignalR connection:', error)\n  //      }\n  //       // Handle connection startup errors here\n  // }\n  startSignalRConnection() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (_this.hubConnection.state === 'Disconnected') {\n        yield _this.hubConnection.start().then(() => {\n          console.log('SignalR connection started successfully.');\n          // Implement any logic you need after a successful connection\n        }).catch(error => {\n          console.error('Error starting SignalR connection:', error);\n          throw error; // Propagate the error\n        });\n      } else {\n        console.warn('SignalR connection is already in a connected or connecting state.');\n      }\n    })();\n  }\n  openNewPage() {\n    debugger;\n    const brwserInfo = navigator.userAgent;\n    // console.log('User-Agent:', userAgent);\n    if (this.hubConnection.state === 'Connected') {\n      this.hubConnection.invoke('OpenNewPage', this.userID, this.email, brwserInfo.toString()).catch(error => {\n        console.error('Error JoinPrivateChat:', error);\n      });\n    } else {\n      console.error('SignalR connection is not in the \"Connected\" state.');\n    }\n  }\n  leavePage() {\n    const brwserInfo = navigator.userAgent;\n    // console.log('User-Agent:', userAgent);\n    this.hubConnection.invoke('LeavePage', this.userID, brwserInfo.toString());\n  }\n  logOut() {\n    const brwserInfo = navigator.userAgent;\n    // console.log('User-Agent:', userAgent);\n    if (this.hubConnection.state === 'Connected') {\n      this.hubConnection.invoke('LeaveApplication', this.userID.toString(), \"1\", brwserInfo.toString()).catch(error => {\n        console.error('Error JoinPrivateChat:', error);\n      });\n    } else {\n      console.error('SignalR connection is not in the \"Connected\" state.');\n    }\n  }\n  static #_ = this.ɵfac = function SignalrService_Factory(t) {\n    return new (t || SignalrService)(i0.ɵɵinject(i1.ToastrService), i0.ɵɵinject(i2.UserContextService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SignalrService,\n    factory: SignalrService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["signalR","SignalrService","constructor","toastrService","userContextService","userID","user$","_value","id","email","hubConnection","HubConnectionBuilder","withUrl","skipNegotiation","transport","HttpTransportType","WebSockets","build","startSignalRConnection","_this","_asyncToGenerator","state","start","then","console","log","catch","error","warn","openNewPage","brwserInfo","navigator","userAgent","invoke","toString","leavePage","logOut","_","i0","ɵɵinject","i1","ToastrService","i2","UserContextService","_2","factory","ɵfac","providedIn"],"sources":["D:\\MailBox\\FrontEnd\\MailBox\\MailboxApp\\src\\app\\common\\signalr.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport * as signalR from '@microsoft/signalr';\nimport { UserContextService } from './user-context.service';\nimport { ToastrService } from 'ngx-toastr';\n@Injectable({\n  providedIn: 'root'\n})\nexport class SignalrService {\n  private userID: any;\n  private email: any;\n  private hubConnection: signalR.HubConnection;\n  constructor(\n    private toastrService: ToastrService,\n    private userContextService: UserContextService,\n  ) {\n    this.userID = this.userContextService.user$._value.id;\n    this.email = this.userContextService.user$._value.email\n    ;\n    this.hubConnection = new signalR.HubConnectionBuilder()\n      .withUrl('http://localhost:5261/mailHub', {\n        skipNegotiation: true,\n        transport: signalR.HttpTransportType.WebSockets\n      }).build();\n   this.startSignalRConnection();\n   }\n  //  async ngOnInit(): Promise<void>\n  //   {\n  //   // Call the API service function when the app component initializes\n  //     try\n  //      {\n  //       await this.startSignalRConnection();\n  //      }\n  //     catch (error)\n  //      {\n  //       console.error('Error starting SignalR connection:', error)\n  //      }\n  //       // Handle connection startup errors here\n  // }\n  async startSignalRConnection(): Promise<void> {\n\n    if (this.hubConnection.state === 'Disconnected') {\n      await this.hubConnection\n        .start()\n        .then(() => {\n          console.log('SignalR connection started successfully.');\n          // Implement any logic you need after a successful connection\n        })\n        .catch((error) => {\n          console.error('Error starting SignalR connection:', error);\n          throw error; // Propagate the error\n        });\n    } else {\n      console.warn('SignalR connection is already in a connected or connecting state.');\n    }\n  }\n  \n   openNewPage(): void {\n    debugger;\n    const brwserInfo = navigator.userAgent;\n    \n    // console.log('User-Agent:', userAgent);\n    if (this.hubConnection.state === 'Connected') {\n      this.hubConnection.invoke('OpenNewPage', this.userID,this.email ,brwserInfo.toString()).catch((error) => {\n        console.error('Error JoinPrivateChat:', error);\n      });\n    } else {\n      console.error('SignalR connection is not in the \"Connected\" state.');\n    }\n  }\n  leavePage(): void {\n    const brwserInfo = navigator.userAgent;\n    // console.log('User-Agent:', userAgent);\n    this.hubConnection.invoke('LeavePage',this.userID ,brwserInfo.toString());\n  }\n  logOut(){\n    const brwserInfo = navigator.userAgent;\n    // console.log('User-Agent:', userAgent);\n    if (this.hubConnection.state === 'Connected') {\n      this.hubConnection.invoke('LeaveApplication', this.userID.toString(),\"1\", brwserInfo.toString()).catch((error) => {\n        console.error('Error JoinPrivateChat:', error);\n      });\n    } else {\n      console.error('SignalR connection is not in the \"Connected\" state.');\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}