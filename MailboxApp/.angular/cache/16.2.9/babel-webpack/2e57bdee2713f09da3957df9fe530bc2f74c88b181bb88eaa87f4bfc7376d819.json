{"ast":null,"code":"import _asyncToGenerator from \"D:/MailBox/FrontEnd/MailBox/MailboxApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as signalR from '@microsoft/signalr';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-toastr\";\nimport * as i2 from \"./user-context.service\";\nexport class SignalrService {\n  //#endregion \n  //#region --------------------   constructor\n  constructor(\n  //connection\n  toastrService, userContextService) {\n    this.toastrService = toastrService;\n    this.userContextService = userContextService;\n    this.userID = this.userContextService.user$._value.id;\n    this.email = this.userContextService.user$._value.email;\n    this.hubConnection = new signalR.HubConnectionBuilder().withUrl('http://localhost:5261/mailHub', {\n      skipNegotiation: true,\n      transport: signalR.HttpTransportType.WebSockets\n    }).build();\n    this.startSignalRConnection();\n    //#region Function Called From Backend\n    this.hubConnection.on('Connected', connectionId => {\n      this.toastrService.success(connectionId);\n    });\n    this.hubConnection.on('MessageSendNotifayMe', (message, status) => {\n      if (status == \"succss\") this.toastrService.success(message);else {\n        this.toastrService.error(message);\n      }\n    });\n    this.hubConnection.on('notifayMe', (message, status) => {\n      if (status == \"Error\") this.toastrService.error(message);else {\n        this.toastrService.success(message);\n      }\n    });\n    //ReceivePrivateMail\", ReceverboxData.boxId, ReceverboxData.SenderId, ReceverboxData.UserName, ReceverboxData.dateTime, ReceverboxData.LastEmailBody, ReceverboxData.photoPath)\n    this.hubConnection.on('ReceivePrivateMail', (boxId, SenderId, UserName, dateTime, LastEmailBody, photoPath) => {\n      const recMail = {\n        'boxId': boxId,\n        'SenderId': SenderId,\n        'UserName': UserName,\n        'dateTime': dateTime,\n        'LastEmailBody': LastEmailBody,\n        'photoPath': photoPath\n      };\n      console.log(recMail);\n    });\n    //#endregion \n  }\n  //#endregion\n  //#region -------------------- Connections & Pages open/close \n  startSignalRConnection() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (_this.hubConnection.state === 'Disconnected') {\n        yield _this.hubConnection.start().then(() => {\n          console.log('SignalR connection started successfully.');\n          // Implement any logic you need after a successful connection\n        }).catch(error => {\n          console.error('Error starting SignalR connection:', error);\n          throw error; // Propagate the error\n        });\n      } else {\n        console.warn('SignalR connection is already in a connected or connecting state.');\n      }\n    })();\n  }\n  openNewPage() {\n    const brwserInfo = navigator.userAgent;\n    this.startSignalRConnection();\n    // console.log('User-Agent:', userAgent);\n    if (this.hubConnection.state === 'Connected') {\n      this.hubConnection.invoke('OpenNewPage', this.userID.toString(), this.email, brwserInfo.toString()).catch(error => {\n        console.error('Error JoinPrivateChat:', error);\n      });\n    } else {\n      console.error('SignalR connection is not in the \"Connected\" state.');\n    }\n  }\n  leavePage() {\n    const brwserInfo = navigator.userAgent;\n    // console.log('User-Agent:', userAgent);\n    this.hubConnection.invoke('LeavePage', this.userID.toString());\n  }\n  logOut() {\n    const brwserInfo = navigator.userAgent;\n    // console.log('User-Agent:', userAgent);\n    if (this.hubConnection.state === 'Connected') {\n      this.hubConnection.invoke('LeaveApplication', this.userID.toString(), brwserInfo.toString()).catch(error => {\n        console.error('Error JoinPrivateChat:', error);\n      });\n    } else {\n      console.error('SignalR connection is not in the \"Connected\" state.');\n    }\n  }\n  //#endregion\n  //#region Message Send\n  //public async Task SendPrivateMail(string currentUserId, string recipientEmail, string Emailmessage,string emailType,string boxid /*,string filePath, string fileType*/)\n  sendPrivateMail(recipientEmail, mailbody, emailType, boxid) {\n    if (mailbody.trim() == \"\" || mailbody.trim() == null) {\n      return;\n    }\n    // Ensure that the connection is in the 'Connected' state before sending the message\n    if (this.hubConnection.state === 'Connected') {\n      // Call a server-side hub method to send the private message\n      this.hubConnection.invoke('SendPrivateMail', this.userID.toString(), recipientEmail, mailbody, emailType, boxid).catch(error => {\n        console.error('Error sending private message:', error);\n      });\n    } else {\n      console.error('SignalR connection is not in the \"Connected\" state.');\n    }\n  }\n  static #_ = this.ɵfac = function SignalrService_Factory(t) {\n    return new (t || SignalrService)(i0.ɵɵinject(i1.ToastrService), i0.ɵɵinject(i2.UserContextService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SignalrService,\n    factory: SignalrService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["signalR","SignalrService","constructor","toastrService","userContextService","userID","user$","_value","id","email","hubConnection","HubConnectionBuilder","withUrl","skipNegotiation","transport","HttpTransportType","WebSockets","build","startSignalRConnection","on","connectionId","success","message","status","error","boxId","SenderId","UserName","dateTime","LastEmailBody","photoPath","recMail","console","log","_this","_asyncToGenerator","state","start","then","catch","warn","openNewPage","brwserInfo","navigator","userAgent","invoke","toString","leavePage","logOut","sendPrivateMail","recipientEmail","mailbody","emailType","boxid","trim","_","i0","ɵɵinject","i1","ToastrService","i2","UserContextService","_2","factory","ɵfac","providedIn"],"sources":["D:\\MailBox\\FrontEnd\\MailBox\\MailboxApp\\src\\app\\common\\signalr.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport * as signalR from '@microsoft/signalr';\nimport { UserContextService } from './user-context.service';\nimport { ToastrService } from 'ngx-toastr';\n@Injectable({\n  providedIn: 'root'\n})\nexport class SignalrService {\n\n//#region ------------------- globle Var\n  private userID: any;\n  private email: any;\n  private hubConnection: signalR.HubConnection; \n//#endregion \n\n  //#region --------------------   constructor\n  constructor(\n    //connection\n    private toastrService: ToastrService,\n    private userContextService: UserContextService, )\n   {\n    this.userID = this.userContextService.user$._value.id;\n    this.email = this.userContextService.user$._value.email\n    ;\n    this.hubConnection = new signalR.HubConnectionBuilder()\n      .withUrl('http://localhost:5261/mailHub', {\n        skipNegotiation: true,\n        transport: signalR.HttpTransportType.WebSockets\n      }).build();\n   this.startSignalRConnection();\n\n  //#region Function Called From Backend\n   this.hubConnection.on('Connected', (connectionId: string) => {this.toastrService.success(connectionId) });\n   this.hubConnection.on('MessageSendNotifayMe', (message: string,status:string) => {\n    if(status==\"succss\")\n         this.toastrService.success(message)\n  else{\n         this.toastrService.error(message)\n      }\n    });\n   this.hubConnection.on('notifayMe', (message: string,status:string) => {\n  \n    if(status==\"Error\")\n    this.toastrService.error(message)\nelse{\n    this.toastrService.success(message)\n    }\n    });\n    //ReceivePrivateMail\", ReceverboxData.boxId, ReceverboxData.SenderId, ReceverboxData.UserName, ReceverboxData.dateTime, ReceverboxData.LastEmailBody, ReceverboxData.photoPath)\n    this.hubConnection.on('ReceivePrivateMail', (boxId: any,SenderId:any,UserName:any,dateTime:any,LastEmailBody:any,photoPath:any) => \n    {\n      const recMail={\n        'boxId':boxId,\n        'SenderId':SenderId,\n        'UserName':UserName,\n        'dateTime':dateTime,\n        'LastEmailBody':LastEmailBody,\n        'photoPath':photoPath,\n      }\n      console.log(recMail);\n    \n    });\n   //#endregion \n   }\n   //#endregion\n\n  //#region -------------------- Connections & Pages open/close \n  async startSignalRConnection(): Promise<void> {\n\n    if (this.hubConnection.state === 'Disconnected') {\n      await this.hubConnection\n        .start()\n        .then(() => {\n          console.log('SignalR connection started successfully.');\n          // Implement any logic you need after a successful connection\n        })\n        .catch((error) => {\n          console.error('Error starting SignalR connection:', error);\n          throw error; // Propagate the error\n        });\n    } else {\n      console.warn('SignalR connection is already in a connected or connecting state.');\n    }\n  }\n   openNewPage(): void {\n   \n    const brwserInfo = navigator.userAgent;\n    this.startSignalRConnection();\n    // console.log('User-Agent:', userAgent);\n    if (this.hubConnection.state === 'Connected') {\n      this.hubConnection.invoke('OpenNewPage', this.userID.toString(), this.email ,brwserInfo.toString()).catch((error) => {\n        console.error('Error JoinPrivateChat:', error);\n      });\n    } else {\n      console.error('SignalR connection is not in the \"Connected\" state.');\n    }\n  }\n  leavePage(): void {\n   \n    const brwserInfo = navigator.userAgent;\n    // console.log('User-Agent:', userAgent);\n    this.hubConnection.invoke('LeavePage',this.userID.toString());\n  }\n  logOut(){\n    const brwserInfo = navigator.userAgent;\n    // console.log('User-Agent:', userAgent);\n    if (this.hubConnection.state === 'Connected') {\n      this.hubConnection.invoke('LeaveApplication', this.userID.toString(), brwserInfo.toString()).catch((error) => {\n        console.error('Error JoinPrivateChat:', error);\n      });\n    } else {\n      console.error('SignalR connection is not in the \"Connected\" state.');\n    }\n  }\n  //#endregion\n\n  //#region Message Send\n  //public async Task SendPrivateMail(string currentUserId, string recipientEmail, string Emailmessage,string emailType,string boxid /*,string filePath, string fileType*/)\n  sendPrivateMail(recipientEmail: string, mailbody: string, emailType: string, boxid:string): void {\n    if(mailbody.trim()==\"\" || mailbody.trim() ==null ){\n      return\n    }\n      // Ensure that the connection is in the 'Connected' state before sending the message\n      if (this.hubConnection.state === 'Connected') {\n\n        // Call a server-side hub method to send the private message\n        this.hubConnection.invoke('SendPrivateMail', this.userID.toString(),recipientEmail,mailbody,emailType,boxid)\n          .catch((error) => {\n            console.error('Error sending private message:', error);\n          });\n      } else {\n        console.error('SignalR connection is not in the \"Connected\" state.');\n      }\n  \n    }\n  //#endregion  \n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}