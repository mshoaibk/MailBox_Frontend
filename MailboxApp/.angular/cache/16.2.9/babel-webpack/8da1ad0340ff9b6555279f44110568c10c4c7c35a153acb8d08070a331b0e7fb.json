{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let SignupComponent = class SignupComponent {\n  constructor(commonService, constantsService, userContextService, routeStateService, toastrService) {\n    this.commonService = commonService;\n    this.constantsService = constantsService;\n    this.userContextService = userContextService;\n    this.routeStateService = routeStateService;\n    this.toastrService = toastrService;\n    this.isRegisterDivShow = true;\n    this.isConfirmationCOdeDiveShow = false;\n    this.ConfirmationCode = \"\";\n    this.usersingUp = {};\n    this.loginRole = {\n      'admin': 'admin',\n      'support': 'support'\n    };\n    this.SessinData = {};\n  }\n  ngOnInit() {\n    this.usersingUp.email = '';\n    this.usersingUp.password = '';\n    this.usersingUp.phoneNumber = '';\n    this.usersingUp.location = '';\n    this.usersingUp.userNamee = '';\n  }\n  SignUp() {\n    debugger;\n    let userModel = {\n      id: 0,\n      email: this.usersingUp.email,\n      password: this.usersingUp.password,\n      phoneNumber: this.usersingUp.phoneNumber.toString(),\n      location: this.usersingUp.location,\n      userNamee: this.usersingUp.userNamee\n    };\n    // console.log('role', userModel)\n    // this.spinnerService.show();\n    let url = this.constantsService.Registration;\n    this.commonService.post(url, userModel).subscribe(Response => {\n      debugger;\n      // //  this.spinnerService.hide();\n      let res = Response;\n      console.log(Response);\n      if (res.status == true) {\n        //colse resitration dev \n        this.isRegisterDivShow = false;\n        //and show cofirmation code div\n        this.isConfirmationCOdeDiveShow = true;\n      } else if (res.status == false && res.message == \"Already Sent\") {\n        this.toastrService.error(res.message, 'Not Authenticated');\n        this.isRegisterDivShow = false;\n        //and show cofirmation code div\n        this.isConfirmationCOdeDiveShow = true;\n      } else {\n        this.toastrService.error(res.message, 'Not Authenticated');\n      }\n      //    debugger;\n      //     this.SessinData.token = userData.token.toString();\n      //     this.SessinData.userRole = userData.userData.role;\n      //     this.SessinData.location = userData.userData.location;\n      //     this.SessinData.email = userData.userData.email;\n      //     this.SessinData.id = userData.userData.id;\n      //     this.SessinData.phoneNumber = userData.userData.phoneNumber;\n      //     ;\n      //     this.userContextService.setUser(this.SessinData); \n      //   //   userData.user.companyID = userData.companyID ? userData.companyID : 0;\n      //   //   userData.user.companyName = userData.companyName ? userData.companyName : '';\n      //   //   userData.user.employeeId = userData.employeeId ? userData.employeeId : '';\n      //   //   userData.user.roles = userData.roles && userData.roles.length > 0 ? userData.roles : [];\n      //   //   this.userContextService.setUserRoles(userData.roles);\n      //   //   this.routeStateService.add(\"Dashboard\", '/dashboard', null, true);   \n      //   }\n      //   // if (userData && userData.status) {\n      //   //   userData.user.userRole = userData.userRole;\n      //   //   userData.user.companyID = userData.companyID ? userData.companyID : 0;\n      //   //   userData.user.companyName = userData.companyName ? userData.companyName : '';\n      //   //   userData.user.employeeId = userData.employeeId ? userData.employeeId : '';\n      //   //   userData.user.roles = userData.roles && userData.roles.length > 0 ? userData.roles : [];\n      //   //   this.userContextService.setUserRoles(userData.roles);\n      //    this.routeStateService.add(\"Dashboard\", '/dashboard', null, true);\n      //   //   return;\n      //   // }\n      //   return;\n    });\n  }\n\n  SignUpWithCOnfirmationCode() {\n    // \"id\": 0,\n    // \"email\": \"string\",\n    // \"phoneNumber\": \"string\",\n    // \"location\": \"string\",\n    // \"password\": \"string\",\n    // \"userNamee\": \"string\",\n    // \"confirmationCOde\": \"string\"\n    let userModel = {\n      id: 0,\n      email: this.usersingUp.email,\n      password: this.usersingUp.password,\n      phoneNumber: this.usersingUp.phoneNumber.toString(),\n      location: this.usersingUp.location,\n      userNamee: this.usersingUp.userNamee,\n      confirmationCOde: this.ConfirmationCode\n    };\n    debugger;\n    // console.log('role', userModel)\n    // this.spinnerService.show();\n    let url = this.constantsService.VerifyConfirmationRegistration;\n    this.commonService.post(url, userModel).subscribe(Response => {\n      // //  this.spinnerService.hide();\n      let res = Response;\n      console.log(Response);\n      if (res.status == true) {\n        this.routeStateService.add(\"Home\", '/Home', null, true);\n      }\n    });\n  }\n};\nSignupComponent = __decorate([Component({\n  selector: 'app-signup',\n  templateUrl: './signup.component.html',\n  styleUrls: ['./signup.component.scss']\n})], SignupComponent);","map":{"version":3,"names":["Component","SignupComponent","constructor","commonService","constantsService","userContextService","routeStateService","toastrService","isRegisterDivShow","isConfirmationCOdeDiveShow","ConfirmationCode","usersingUp","loginRole","SessinData","ngOnInit","email","password","phoneNumber","location","userNamee","SignUp","userModel","id","toString","url","Registration","post","subscribe","Response","res","console","log","status","message","error","SignUpWithCOnfirmationCode","confirmationCOde","VerifyConfirmationRegistration","add","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\MailBox\\FrontEnd\\MailBox\\MailboxApp\\src\\app\\auth\\signup\\signup.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { CommonService } from 'src/app/common/common.service';\nimport { ConstantService } from 'src/app/common/constant.service';\nimport { UserContextService } from 'src/app/common/user-context.service';\n\n@Component({\n  selector: 'app-signup',\n  templateUrl: './signup.component.html',\n  styleUrls: ['./signup.component.scss']\n})\nexport class SignupComponent {\n  isRegisterDivShow : boolean = true;\n  isConfirmationCOdeDiveShow:boolean = false;\n  ConfirmationCode : string = \"\"\n  usersingUp: any = {};\n  loginRole: any = {\n    'admin': 'admin',\n    'support': 'support'\n  }\n  SessinData: any = {};\n  constructor(private commonService: CommonService,\n    private constantsService: ConstantService, private userContextService: UserContextService\n    , private routeStateService: RouteStateService,\n    private toastrService: ToastrService,\n    // private spinnerService: NgxSpinnerService\n    ) { }\n\n  ngOnInit(): void {\n    this.usersingUp.email = '';\n    this.usersingUp.password = '';\n     this.usersingUp.phoneNumber = ''; \n     this.usersingUp.location = ''; \n     this.usersingUp.userNamee = '';\n  }\n\n  SignUp() {\n   \ndebugger;\n    let userModel = {\n      id:0,\n      email: this.usersingUp.email,\n      password: this.usersingUp.password,\n      phoneNumber: this.usersingUp.phoneNumber.toString(),\n      location: this.usersingUp.location, \n      userNamee: this.usersingUp.userNamee,\n     }\n   // console.log('role', userModel)\n   // this.spinnerService.show();\n    let url = this.constantsService.Registration;\n     this.commonService.post(url, userModel).subscribe(Response => {\n      debugger;\n    // //  this.spinnerService.hide();\n       let res: any = Response;\n       \n      console.log(Response);\n     if(res.status == true){\n      //colse resitration dev \n      this.isRegisterDivShow =false;\n      //and show cofirmation code div\n      this.isConfirmationCOdeDiveShow = true;\n     }\n     else if(res.status == false && res.message ==\"Already Sent\")\n        {\n          this.toastrService.error(res.message, 'Not Authenticated');\n          this.isRegisterDivShow =false;\n          //and show cofirmation code div\n          this.isConfirmationCOdeDiveShow = true;\n        }\n        else{\n          this.toastrService.error(res.message, 'Not Authenticated');\n        }\n    //    debugger;\n    //     this.SessinData.token = userData.token.toString();\n    //     this.SessinData.userRole = userData.userData.role;\n    //     this.SessinData.location = userData.userData.location;\n    //     this.SessinData.email = userData.userData.email;\n    //     this.SessinData.id = userData.userData.id;\n    //     this.SessinData.phoneNumber = userData.userData.phoneNumber;\n    //     ;\n    //     this.userContextService.setUser(this.SessinData); \n    //   //   userData.user.companyID = userData.companyID ? userData.companyID : 0;\n    //   //   userData.user.companyName = userData.companyName ? userData.companyName : '';\n    //   //   userData.user.employeeId = userData.employeeId ? userData.employeeId : '';\n    //   //   userData.user.roles = userData.roles && userData.roles.length > 0 ? userData.roles : [];\n    //   //   this.userContextService.setUserRoles(userData.roles);\n    //   //   this.routeStateService.add(\"Dashboard\", '/dashboard', null, true);   \n    //   }\n    //   // if (userData && userData.status) {\n    //   //   userData.user.userRole = userData.userRole;\n    //   //   userData.user.companyID = userData.companyID ? userData.companyID : 0;\n    //   //   userData.user.companyName = userData.companyName ? userData.companyName : '';\n    //   //   userData.user.employeeId = userData.employeeId ? userData.employeeId : '';\n    //   //   userData.user.roles = userData.roles && userData.roles.length > 0 ? userData.roles : [];\n    //   //   this.userContextService.setUserRoles(userData.roles);\n    //    this.routeStateService.add(\"Dashboard\", '/dashboard', null, true);\n    //   //   return;\n    //   // }\n    \n    //   return;\n    });\n  }\n  SignUpWithCOnfirmationCode(){\n    // \"id\": 0,\n    // \"email\": \"string\",\n    // \"phoneNumber\": \"string\",\n    // \"location\": \"string\",\n    // \"password\": \"string\",\n    // \"userNamee\": \"string\",\n    // \"confirmationCOde\": \"string\"\n    let userModel = {\n      id:0,\n      email: this.usersingUp.email,\n      password: this.usersingUp.password,\n      phoneNumber: this.usersingUp.phoneNumber.toString(),\n      location: this.usersingUp.location, \n      userNamee: this.usersingUp.userNamee,\n      confirmationCOde:this.ConfirmationCode\n     }\n     debugger;\n   // console.log('role', userModel)\n   // this.spinnerService.show();\n    let url = this.constantsService.VerifyConfirmationRegistration;\n     this.commonService.post(url, userModel).subscribe(Response => {\n    // //  this.spinnerService.hide();\n       let res: any = Response;\n      \n      console.log(Response);\n      if(res.status == true)\n      {\n\n       this.routeStateService.add(\"Home\", '/Home', null, true);\n\n      }\n    });\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}