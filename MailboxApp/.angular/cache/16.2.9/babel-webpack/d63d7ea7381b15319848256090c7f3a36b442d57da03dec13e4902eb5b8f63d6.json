{"ast":null,"code":"import * as i0 from \"@angular/core\";\n//import { UserContextService } from './user-context.service';\nexport class AuthInterceptor {\n  constructor() {\n    //this.token =  UserContextService.user$._value.userRole;\n  }\n  intercept(request, next) {\n    if (this.token) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${this.token}`\n        }\n      });\n    }\n    return next.handle(request);\n  }\n  static #_ = this.ɵfac = function AuthInterceptor_Factory(t) {\n    return new (t || AuthInterceptor)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthInterceptor,\n    factory: AuthInterceptor.ɵfac\n  });\n}","map":{"version":3,"names":["AuthInterceptor","constructor","intercept","request","next","token","clone","setHeaders","Authorization","handle","_","_2","factory","ɵfac"],"sources":["D:\\MailBox\\FrontEnd\\MailBox\\MailboxApp\\src\\app\\common\\auth.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\n//import { UserContextService } from './user-context.service';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n token:any;\n  constructor() {\n    //this.token =  UserContextService.user$._value.userRole;\n  }\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    if(this.token){\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${this.token}`,\n        }\n      });\n    }\n    return next.handle(request);\n  }\n}\n"],"mappings":";AAQA;AAGA,OAAM,MAAOA,eAAe;EAE1BC,YAAA;IACE;EAAA;EAGFC,SAASA,CAACC,OAA6B,EAAEC,IAAiB;IACxD,IAAG,IAAI,CAACC,KAAK,EAAC;MACZF,OAAO,GAAGA,OAAO,CAACG,KAAK,CAAC;QACtBC,UAAU,EAAE;UACVC,aAAa,EAAE,UAAU,IAAI,CAACH,KAAK;;OAEtC,CAAC;;IAEJ,OAAOD,IAAI,CAACK,MAAM,CAACN,OAAO,CAAC;EAC7B;EAAC,QAAAO,CAAA,G;qBAfUV,eAAe;EAAA;EAAA,QAAAW,EAAA,G;WAAfX,eAAe;IAAAY,OAAA,EAAfZ,eAAe,CAAAa;EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}