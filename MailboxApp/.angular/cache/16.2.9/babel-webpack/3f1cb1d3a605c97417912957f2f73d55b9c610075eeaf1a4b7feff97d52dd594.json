{"ast":null,"code":"import _asyncToGenerator from \"D:/MailBox/FrontEnd/MailBox/MailboxApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as signalR from '@microsoft/signalr';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-toastr\";\nimport * as i2 from \"./user-context.service\";\nimport * as i3 from \"../dashboard/home/service/mailbox.service\";\nexport class SignalrService {\n  //#endregion \n  //#region --------------------   constructor\n  constructor(\n  //connection\n  toastrService, userContextService, mailboxService) {\n    this.toastrService = toastrService;\n    this.userContextService = userContextService;\n    this.mailboxService = mailboxService;\n    this.inboxList = [];\n    this.sentboxList = [];\n    this.userID = this.userContextService.user$._value.id;\n    this.email = this.userContextService.user$._value.email;\n    this.hubConnection = new signalR.HubConnectionBuilder().withUrl('http://localhost:5261/mailHub', {\n      skipNegotiation: true,\n      transport: signalR.HttpTransportType.WebSockets\n    }).build();\n    this.startSignalRConnection();\n    //#region Function Called From Backend\n    this.hubConnection.on('Connected', connectionId => {\n      this.toastrService.success(connectionId);\n    });\n    this.hubConnection.on('MessageSendNotifayMe', (message, status) => {\n      if (status == \"succss\") this.toastrService.success(message);else {\n        this.toastrService.error(message);\n      }\n    });\n    this.hubConnection.on('notifayMe', (message, status) => {\n      if (status == \"Error\") this.toastrService.error(message);else {\n        this.toastrService.success(message);\n      }\n    });\n    this.hubConnection.on('ReceivePrivateMail', (boxId, SenderId, UserName, dateTime, LastEmailBody, photoPath) => {\n      debugger;\n      const recMail = {\n        'boxId': boxId,\n        'dateTime': dateTime,\n        'LastEmail': {\n          'SenderId': SenderId,\n          'UserName': UserName,\n          'LastEmailBody': LastEmailBody,\n          'photoPath': photoPath\n        }\n      };\n      console.log(recMail);\n      // Add the received mail data to the top of the inboxList array\n      this.inboxList.unshift(recMail);\n    });\n    this.hubConnection.on('Sentboxupdate', (boxId, SenderId, UserName, dateTime, LastEmailBody, photoPath) => {\n      const recMail = {\n        'boxId': boxId,\n        'SenderId': SenderId,\n        'UserName': UserName,\n        'dateTime': dateTime,\n        'LastEmailBody': LastEmailBody,\n        'photoPath': photoPath\n      };\n      console.log(recMail);\n      this.sentboxList.push(recMail);\n    });\n    //#endregion \n  }\n  //#endregion\n  //#region -------------------- Connections & Pages open/close \n  startSignalRConnection() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (_this.hubConnection.state === 'Disconnected') {\n        yield _this.hubConnection.start().then(() => {\n          console.log('SignalR connection started successfully.');\n          // Implement any logic you need after a successful connection\n        }).catch(error => {\n          console.error('Error starting SignalR connection:', error);\n          throw error; // Propagate the error\n        });\n      } else {\n        console.warn('SignalR connection is already in a connected or connecting state.');\n      }\n    })();\n  }\n  openNewPage() {\n    const brwserInfo = navigator.userAgent;\n    this.startSignalRConnection();\n    // console.log('User-Agent:', userAgent);\n    if (this.hubConnection.state === 'Connected') {\n      this.hubConnection.invoke('OpenNewPage', this.userID.toString(), this.email, brwserInfo.toString()).catch(error => {\n        console.error('Error JoinPrivateChat:', error);\n      });\n    } else {\n      console.error('SignalR connection is not in the \"Connected\" state.');\n    }\n  }\n  leavePage() {\n    const brwserInfo = navigator.userAgent;\n    // console.log('User-Agent:', userAgent);\n    this.hubConnection.invoke('LeavePage', this.userID.toString());\n  }\n  logOut() {\n    const brwserInfo = navigator.userAgent;\n    // console.log('User-Agent:', userAgent);\n    if (this.hubConnection.state === 'Connected') {\n      this.hubConnection.invoke('LeaveApplication', this.userID.toString(), brwserInfo.toString()).catch(error => {\n        console.error('Error JoinPrivateChat:', error);\n      });\n    } else {\n      console.error('SignalR connection is not in the \"Connected\" state.');\n    }\n  }\n  //#endregion\n  //#region Message Send\n  //public async Task SendPrivateMail(string currentUserId, string recipientEmail, string Emailmessage,string emailType,string boxid /*,string filePath, string fileType*/)\n  sendPrivateMail(recipientEmail, Subject, mailbody, emailType, boxid) {\n    if (mailbody.trim() == \"\" || mailbody.trim() == null) {\n      return;\n    }\n    // Ensure that the connection is in the 'Connected' state before sending the message\n    if (this.hubConnection.state === 'Connected') {\n      // Call a server-side hub method to send the private message\n      this.hubConnection.invoke('SendPrivateMail', this.userID.toString(), recipientEmail, Subject, mailbody, emailType, boxid).catch(error => {\n        console.error('Error sending private message:', error);\n      });\n    } else {\n      console.error('SignalR connection is not in the \"Connected\" state.');\n    }\n  }\n  //#endregion  \n  //#region inbox\n  getInbox() {\n    this.mailboxService.getInbox(this.userID).subscribe(res => {\n      console.log(res);\n      if (res.status == true) {\n        this.inboxList = res.inbox;\n      } else {\n        this.toastrService.error(\"error:getting inbox data\");\n      }\n    });\n  }\n  getsentbox() {\n    this.mailboxService.getsent(this.userID).subscribe(res => {\n      console.log(res);\n      if (res.status == true) {\n        this.sentboxList = res.inbox;\n      } else {\n        this.toastrService.error(\"error:getting inbox data\");\n      }\n    });\n  }\n  static #_ = this.ɵfac = function SignalrService_Factory(t) {\n    return new (t || SignalrService)(i0.ɵɵinject(i1.ToastrService), i0.ɵɵinject(i2.UserContextService), i0.ɵɵinject(i3.MailboxService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SignalrService,\n    factory: SignalrService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["signalR","SignalrService","constructor","toastrService","userContextService","mailboxService","inboxList","sentboxList","userID","user$","_value","id","email","hubConnection","HubConnectionBuilder","withUrl","skipNegotiation","transport","HttpTransportType","WebSockets","build","startSignalRConnection","on","connectionId","success","message","status","error","boxId","SenderId","UserName","dateTime","LastEmailBody","photoPath","recMail","console","log","unshift","push","_this","_asyncToGenerator","state","start","then","catch","warn","openNewPage","brwserInfo","navigator","userAgent","invoke","toString","leavePage","logOut","sendPrivateMail","recipientEmail","Subject","mailbody","emailType","boxid","trim","getInbox","subscribe","res","inbox","getsentbox","getsent","_","i0","ɵɵinject","i1","ToastrService","i2","UserContextService","i3","MailboxService","_2","factory","ɵfac","providedIn"],"sources":["D:\\MailBox\\FrontEnd\\MailBox\\MailboxApp\\src\\app\\common\\signalr.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport * as signalR from '@microsoft/signalr';\nimport { UserContextService } from './user-context.service';\nimport { ToastrService } from 'ngx-toastr';\nimport { MailboxService } from '../dashboard/home/service/mailbox.service';\n@Injectable({\n  providedIn: 'root'\n})\nexport class SignalrService {\n\n//#region ------------------- globle Var\n  private userID: any;\n  private email: any;\n  private hubConnection: signalR.HubConnection; \n  public inboxList:any=[];\n  public sentboxList:any=[]\n//#endregion \n\n  //#region --------------------   constructor\n  constructor(\n    //connection\n    private toastrService: ToastrService,\n    private userContextService: UserContextService,\n    private mailboxService:MailboxService,\n    )\n   {\n    this.userID = this.userContextService.user$._value.id;\n    this.email = this.userContextService.user$._value.email\n    ;\n    this.hubConnection = new signalR.HubConnectionBuilder()\n      .withUrl('http://localhost:5261/mailHub', {\n        skipNegotiation: true,\n        transport: signalR.HttpTransportType.WebSockets\n      }).build();\n   this.startSignalRConnection();\n\n  //#region Function Called From Backend\n   this.hubConnection.on('Connected', (connectionId: string) => {this.toastrService.success(connectionId) });\n   this.hubConnection.on('MessageSendNotifayMe', (message: string,status:string) => {\n    if(status==\"succss\")\n         this.toastrService.success(message)\n  else{\n         this.toastrService.error(message)\n      }\n    });\n   this.hubConnection.on('notifayMe', (message: string,status:string) => {\n  \n    if(status==\"Error\")\n    this.toastrService.error(message)\nelse{\n    this.toastrService.success(message)\n    }\n    });\n    \n    this.hubConnection.on('ReceivePrivateMail', (boxId: any, SenderId: any, UserName: any, dateTime: any, LastEmailBody: any, photoPath: any) => {\n      debugger;\n      const recMail = {\n        'boxId': boxId,\n        'dateTime': dateTime,\n        'LastEmail': {\n          'SenderId': SenderId,\n          'UserName': UserName,\n          'LastEmailBody': LastEmailBody,\n          'photoPath': photoPath,\n        }\n      };\n      console.log(recMail);\n    \n      // Add the received mail data to the top of the inboxList array\n      this.inboxList.unshift(recMail);\n    });\n    \n    this.hubConnection.on('Sentboxupdate', (boxId: any,SenderId:any,UserName:any,dateTime:any,LastEmailBody:any,photoPath:any) => \n    {\n      const recMail={\n        'boxId':boxId,\n        'SenderId':SenderId,\n        'UserName':UserName,\n        'dateTime':dateTime,\n        'LastEmailBody':LastEmailBody,\n        'photoPath':photoPath,\n      }\n      console.log(recMail);\n      this.sentboxList.push(recMail)\n    });\n   //#endregion \n   }\n   //#endregion\n\n  //#region -------------------- Connections & Pages open/close \n  async startSignalRConnection(): Promise<void> {\n\n    if (this.hubConnection.state === 'Disconnected') {\n      await this.hubConnection\n        .start()\n        .then(() => {\n          console.log('SignalR connection started successfully.');\n          // Implement any logic you need after a successful connection\n        })\n        .catch((error) => {\n          console.error('Error starting SignalR connection:', error);\n          throw error; // Propagate the error\n        });\n    } else {\n      console.warn('SignalR connection is already in a connected or connecting state.');\n    }\n  }\n   openNewPage(): void {\n   \n    const brwserInfo = navigator.userAgent;\n    this.startSignalRConnection();\n    // console.log('User-Agent:', userAgent);\n    if (this.hubConnection.state === 'Connected') {\n      this.hubConnection.invoke('OpenNewPage', this.userID.toString(), this.email ,brwserInfo.toString()).catch((error) => {\n        console.error('Error JoinPrivateChat:', error);\n      });\n    } else {\n      console.error('SignalR connection is not in the \"Connected\" state.');\n    }\n  }\n  leavePage(): void {\n   \n    const brwserInfo = navigator.userAgent;\n    // console.log('User-Agent:', userAgent);\n    this.hubConnection.invoke('LeavePage',this.userID.toString());\n  }\n  logOut(){\n    const brwserInfo = navigator.userAgent;\n    // console.log('User-Agent:', userAgent);\n    if (this.hubConnection.state === 'Connected') {\n      this.hubConnection.invoke('LeaveApplication', this.userID.toString(), brwserInfo.toString()).catch((error) => {\n        console.error('Error JoinPrivateChat:', error);\n      });\n    } else {\n      console.error('SignalR connection is not in the \"Connected\" state.');\n    }\n  }\n  //#endregion\n\n  //#region Message Send\n  //public async Task SendPrivateMail(string currentUserId, string recipientEmail, string Emailmessage,string emailType,string boxid /*,string filePath, string fileType*/)\n  sendPrivateMail(recipientEmail: string,Subject:string ,mailbody: string, emailType: string, boxid:string): void {\n    if(mailbody.trim()==\"\" || mailbody.trim() ==null ){\n      return\n    }\n      // Ensure that the connection is in the 'Connected' state before sending the message\n      if (this.hubConnection.state === 'Connected') {\n\n        // Call a server-side hub method to send the private message\n        this.hubConnection.invoke('SendPrivateMail', this.userID.toString(),recipientEmail,Subject,mailbody,emailType,boxid)\n          .catch((error) => {\n            console.error('Error sending private message:', error);\n          });\n      } else {\n        console.error('SignalR connection is not in the \"Connected\" state.');\n      }\n  \n    }\n  //#endregion  \n\n  //#region inbox\n  getInbox(){\n  this.mailboxService.getInbox(this.userID).subscribe(res=>{\n console.log(res);\n if(res.status==true)\n    {\n      this.inboxList = res.inbox\n    }\n    else{\n      this.toastrService.error(\"error:getting inbox data\")\n    }\n  });\n  }\n  getsentbox(){\n    this.mailboxService.getsent(this.userID).subscribe(res=>{\n   console.log(res);\n   if(res.status==true)\n      {\n        this.sentboxList = res.inbox\n      }\n      else{\n        this.toastrService.error(\"error:getting inbox data\")\n      }\n    });\n    }\n  //#endregion\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}