{"ast":null,"code":"import * as signalR from '@microsoft/signalr';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-toastr\";\nimport * as i2 from \"./user-context.service\";\nexport class SignalrService {\n  constructor(toastrService, userContextService) {\n    this.toastrService = toastrService;\n    this.userContextService = userContextService;\n    this.userID = this.userContextService.user$._value.id;\n    this.hubConnection = new signalR.HubConnectionBuilder().withUrl('http://localhost:5261/mailHub', {\n      skipNegotiation: true,\n      transport: signalR.HttpTransportType.WebSockets\n    }).build();\n  }\n  openNewPage() {\n    const brwserInfo = navigator.userAgent;\n    // console.log('User-Agent:', userAgent);\n    if (this.hubConnection.state === 'Connected') {\n      this.hubConnection.invoke('OpenNewPage', thisuserID, userName, \"1\", brwserInfo.toString()).catch(error => {\n        console.error('Error JoinPrivateChat:', error);\n      });\n    } else {\n      console.error('SignalR connection is not in the \"Connected\" state.');\n    }\n  }\n  leavePage() {\n    const brwserInfo = navigator.userAgent;\n    // console.log('User-Agent:', userAgent);\n    this.hubConnection.invoke('LeavePage', brwserInfo.toString());\n  }\n  logOut() {\n    const brwserInfo = navigator.userAgent;\n    // console.log('User-Agent:', userAgent);\n    if (this.hubConnection.state === 'Connected') {\n      this.hubConnection.invoke('LeaveApplication', this.userID.toString(), \"1\", brwserInfo.toString()).catch(error => {\n        console.error('Error JoinPrivateChat:', error);\n      });\n    } else {\n      console.error('SignalR connection is not in the \"Connected\" state.');\n    }\n  }\n  static #_ = this.ɵfac = function SignalrService_Factory(t) {\n    return new (t || SignalrService)(i0.ɵɵinject(i1.ToastrService), i0.ɵɵinject(i2.UserContextService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SignalrService,\n    factory: SignalrService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["signalR","SignalrService","constructor","toastrService","userContextService","userID","user$","_value","id","hubConnection","HubConnectionBuilder","withUrl","skipNegotiation","transport","HttpTransportType","WebSockets","build","openNewPage","brwserInfo","navigator","userAgent","state","invoke","thisuserID","userName","toString","catch","error","console","leavePage","logOut","_","i0","ɵɵinject","i1","ToastrService","i2","UserContextService","_2","factory","ɵfac","providedIn"],"sources":["D:\\MailBox\\FrontEnd\\MailBox\\MailboxApp\\src\\app\\common\\signalr.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport * as signalR from '@microsoft/signalr';\nimport { UserContextService } from './user-context.service';\nimport { ToastrService } from 'ngx-toastr';\n@Injectable({\n  providedIn: 'root'\n})\nexport class SignalrService {\n  private userID: any;\n  private hubConnection: signalR.HubConnection;\n  constructor(\n    private toastrService: ToastrService,\n    private userContextService: UserContextService,\n  ) {\n    this.userID = this.userContextService.user$._value.id\n    ;\n    this.hubConnection = new signalR.HubConnectionBuilder()\n      .withUrl('http://localhost:5261/mailHub', {\n        skipNegotiation: true,\n        transport: signalR.HttpTransportType.WebSockets\n      }).build();\n   }\n   openNewPage(): void {\n    const brwserInfo = navigator.userAgent;\n    // console.log('User-Agent:', userAgent);\n    if (this.hubConnection.state === 'Connected') {\n      this.hubConnection.invoke('OpenNewPage', thisuserID, userName, \"1\", brwserInfo.toString()).catch((error) => {\n        console.error('Error JoinPrivateChat:', error);\n      });\n    } else {\n      console.error('SignalR connection is not in the \"Connected\" state.');\n    }\n  }\n  leavePage(): void {\n    const brwserInfo = navigator.userAgent;\n    // console.log('User-Agent:', userAgent);\n    this.hubConnection.invoke('LeavePage', brwserInfo.toString());\n  }\n  logOut(){\n    const brwserInfo = navigator.userAgent;\n    // console.log('User-Agent:', userAgent);\n    if (this.hubConnection.state === 'Connected') {\n      this.hubConnection.invoke('LeaveApplication', this.userID.toString(),\"1\", brwserInfo.toString()).catch((error) => {\n        console.error('Error JoinPrivateChat:', error);\n      });\n    } else {\n      console.error('SignalR connection is not in the \"Connected\" state.');\n    }\n  }\n}\n"],"mappings":"AACA,OAAO,KAAKA,OAAO,MAAM,oBAAoB;;;;AAM7C,OAAM,MAAOC,cAAc;EAGzBC,YACUC,aAA4B,EAC5BC,kBAAsC;IADtC,KAAAD,aAAa,GAAbA,aAAa;IACb,KAAAC,kBAAkB,GAAlBA,kBAAkB;IAE1B,IAAI,CAACC,MAAM,GAAG,IAAI,CAACD,kBAAkB,CAACE,KAAK,CAACC,MAAM,CAACC,EAAE;IAErD,IAAI,CAACC,aAAa,GAAG,IAAIT,OAAO,CAACU,oBAAoB,EAAE,CACpDC,OAAO,CAAC,+BAA+B,EAAE;MACxCC,eAAe,EAAE,IAAI;MACrBC,SAAS,EAAEb,OAAO,CAACc,iBAAiB,CAACC;KACtC,CAAC,CAACC,KAAK,EAAE;EACb;EACAC,WAAWA,CAAA;IACV,MAAMC,UAAU,GAAGC,SAAS,CAACC,SAAS;IACtC;IACA,IAAI,IAAI,CAACX,aAAa,CAACY,KAAK,KAAK,WAAW,EAAE;MAC5C,IAAI,CAACZ,aAAa,CAACa,MAAM,CAAC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAE,GAAG,EAAEN,UAAU,CAACO,QAAQ,EAAE,CAAC,CAACC,KAAK,CAAEC,KAAK,IAAI;QACzGC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAChD,CAAC,CAAC;KACH,MAAM;MACLC,OAAO,CAACD,KAAK,CAAC,qDAAqD,CAAC;;EAExE;EACAE,SAASA,CAAA;IACP,MAAMX,UAAU,GAAGC,SAAS,CAACC,SAAS;IACtC;IACA,IAAI,CAACX,aAAa,CAACa,MAAM,CAAC,WAAW,EAAEJ,UAAU,CAACO,QAAQ,EAAE,CAAC;EAC/D;EACAK,MAAMA,CAAA;IACJ,MAAMZ,UAAU,GAAGC,SAAS,CAACC,SAAS;IACtC;IACA,IAAI,IAAI,CAACX,aAAa,CAACY,KAAK,KAAK,WAAW,EAAE;MAC5C,IAAI,CAACZ,aAAa,CAACa,MAAM,CAAC,kBAAkB,EAAE,IAAI,CAACjB,MAAM,CAACoB,QAAQ,EAAE,EAAC,GAAG,EAAEP,UAAU,CAACO,QAAQ,EAAE,CAAC,CAACC,KAAK,CAAEC,KAAK,IAAI;QAC/GC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAChD,CAAC,CAAC;KACH,MAAM;MACLC,OAAO,CAACD,KAAK,CAAC,qDAAqD,CAAC;;EAExE;EAAC,QAAAI,CAAA,G;qBAzCU9B,cAAc,EAAA+B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,aAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,kBAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAdrC,cAAc;IAAAsC,OAAA,EAAdtC,cAAc,CAAAuC,IAAA;IAAAC,UAAA,EAFb;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}