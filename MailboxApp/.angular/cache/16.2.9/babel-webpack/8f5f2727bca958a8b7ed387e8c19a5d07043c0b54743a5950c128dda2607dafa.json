{"ast":null,"code":"import _asyncToGenerator from \"D:/MailBox/FrontEnd/MailBox/MailboxApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component, HostListener } from '@angular/core';\nimport * as signalR from '@microsoft/signalr';\nexport let HomeComponent = class HomeComponent {\n  constructor(signalRService) {\n    this.signalRService = signalRService;\n    //SignalR\n    this.hubConnection = new signalR.HubConnectionBuilder().withUrl('http://localhost:5261/mailHub', {\n      skipNegotiation: true,\n      transport: signalR.HttpTransportType.WebSockets\n    }).build();\n  }\n  ngOnInit() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      // Call the API service function when the app component initializes\n      try {\n        yield _this.startSignalRConnection();\n        _this.signalRService.openNewPage();\n        console.log(\"openNewPage is called\");\n      } catch (error) {\n        console.error('Error starting SignalR connection:', error);\n        // Handle connection startup errors here\n      }\n    })();\n  }\n\n  startSignalRConnection() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      if (_this2.hubConnection.state === 'Disconnected') {\n        yield _this2.hubConnection.start().then(() => {\n          console.log('SignalR connection started successfully.');\n          // Implement any logic you need after a successful connection\n        }).catch(error => {\n          console.error('Error starting SignalR connection:', error);\n          throw error; // Propagate the error\n        });\n      } else {\n        console.warn('SignalR connection is already in a connected or connecting state.');\n      }\n    })();\n  }\n  unloadNotification($event) {\n    this.signalRService.leavePage();\n    console.log(\"page is closed\");\n  }\n};\n__decorate([HostListener('window:beforeunload', ['$event'])], HomeComponent.prototype, \"unloadNotification\", null);\nHomeComponent = __decorate([Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})], HomeComponent);","map":{"version":3,"names":["Component","HostListener","signalR","HomeComponent","constructor","signalRService","hubConnection","HubConnectionBuilder","withUrl","skipNegotiation","transport","HttpTransportType","WebSockets","build","ngOnInit","_this","_asyncToGenerator","startSignalRConnection","openNewPage","console","log","error","_this2","state","start","then","catch","warn","unloadNotification","$event","leavePage","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\MailBox\\FrontEnd\\MailBox\\MailboxApp\\src\\app\\dashboard\\home\\home.component.ts"],"sourcesContent":["import { Component, HostListener } from '@angular/core';\nimport * as signalR from '@microsoft/signalr';\nimport { SignalrService } from 'src/app/common/signalr.service';\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent {\n  private hubConnection: signalR.HubConnection;\n  constructor(private signalRService: SignalrService){\n     //SignalR\n     this.hubConnection = new signalR.HubConnectionBuilder()\n     .withUrl('http://localhost:5261/mailHub', {\n       skipNegotiation: true,\n       transport: signalR.HttpTransportType.WebSockets\n     })\n     .build();\n  }\n  async ngOnInit(): Promise<void> {\n    // Call the API service function when the app component initializes\n\n    try {\n      await this.startSignalRConnection();\n      this.signalRService.openNewPage();\n      console.log(\"openNewPage is called\");\n    } catch (error) {\n      console.error('Error starting SignalR connection:', error);\n      // Handle connection startup errors here\n    }\n  }\n  async startSignalRConnection(): Promise<void> {\n    if (this.hubConnection.state === 'Disconnected') {\n      await this.hubConnection\n        .start()\n        .then(() => {\n          console.log('SignalR connection started successfully.');\n          // Implement any logic you need after a successful connection\n        })\n        .catch((error) => {\n          console.error('Error starting SignalR connection:', error);\n          throw error; // Propagate the error\n        });\n    } else {\n      console.warn('SignalR connection is already in a connected or connecting state.');\n    }\n  }\n  @HostListener('window:beforeunload', ['$event'])\n  unloadNotification($event: any): void {\n    this.signalRService.leavePage();\n    console.log(\"page is closed\");\n  }\n}\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,YAAY,QAAQ,eAAe;AACvD,OAAO,KAAKC,OAAO,MAAM,oBAAoB;AAOtC,WAAMC,aAAa,GAAnB,MAAMA,aAAa;EAExBC,YAAoBC,cAA8B;IAA9B,KAAAA,cAAc,GAAdA,cAAc;IAC/B;IACA,IAAI,CAACC,aAAa,GAAG,IAAIJ,OAAO,CAACK,oBAAoB,EAAE,CACtDC,OAAO,CAAC,+BAA+B,EAAE;MACxCC,eAAe,EAAE,IAAI;MACrBC,SAAS,EAAER,OAAO,CAACS,iBAAiB,CAACC;KACtC,CAAC,CACDC,KAAK,EAAE;EACX;EACMC,QAAQA,CAAA;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MACZ;MAEA,IAAI;QACF,MAAMD,KAAI,CAACE,sBAAsB,EAAE;QACnCF,KAAI,CAACV,cAAc,CAACa,WAAW,EAAE;QACjCC,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;OACrC,CAAC,OAAOC,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;QAC1D;;IACD;EACH;;EACMJ,sBAAsBA,CAAA;IAAA,IAAAK,MAAA;IAAA,OAAAN,iBAAA;MAC1B,IAAIM,MAAI,CAAChB,aAAa,CAACiB,KAAK,KAAK,cAAc,EAAE;QAC/C,MAAMD,MAAI,CAAChB,aAAa,CACrBkB,KAAK,EAAE,CACPC,IAAI,CAAC,MAAK;UACTN,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC;UACvD;QACF,CAAC,CAAC,CACDM,KAAK,CAAEL,KAAK,IAAI;UACfF,OAAO,CAACE,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;UAC1D,MAAMA,KAAK,CAAC,CAAC;QACf,CAAC,CAAC;OACL,MAAM;QACLF,OAAO,CAACQ,IAAI,CAAC,mEAAmE,CAAC;;IAClF;EACH;EAEAC,kBAAkBA,CAACC,MAAW;IAC5B,IAAI,CAACxB,cAAc,CAACyB,SAAS,EAAE;IAC/BX,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;EAC/B;CACD;AAJCW,UAAA,EADC9B,YAAY,CAAC,qBAAqB,EAAE,CAAC,QAAQ,CAAC,CAAC,C,sDAI/C;AA3CUE,aAAa,GAAA4B,UAAA,EALzB/B,SAAS,CAAC;EACTgC,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,uBAAuB;EACpCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,C,EACW/B,aAAa,CA4CzB"},"metadata":{},"sourceType":"module","externalDependencies":[]}