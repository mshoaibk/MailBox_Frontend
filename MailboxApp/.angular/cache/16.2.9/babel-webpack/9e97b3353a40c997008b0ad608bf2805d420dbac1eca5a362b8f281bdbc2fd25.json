{"ast":null,"code":"import _asyncToGenerator from \"D:/MailBox/FrontEnd/MailBox/MailboxApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as signalR from '@microsoft/signalr';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-toastr\";\nimport * as i2 from \"./user-context.service\";\nexport class SignalrService {\n  constructor(toastrService, userContextService) {\n    this.toastrService = toastrService;\n    this.userContextService = userContextService;\n    this.userID = this.userContextService.user$._value.id;\n    this.email = this.userContextService.user$._value.email;\n    this.hubConnection = new signalR.HubConnectionBuilder().withUrl('http://localhost:5261/mailHub', {\n      skipNegotiation: true,\n      transport: signalR.HttpTransportType.WebSockets\n    }).build();\n  }\n  ngOnInit() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      // Call the API service function when the app component initializes\n      try {\n        yield _this.startSignalRConnection();\n      } catch (error) {\n        console.error('Error starting SignalR connection:', error);\n      }\n      // Handle connection startup errors here\n    })();\n  }\n\n  openNewPage() {\n    const brwserInfo = navigator.userAgent;\n    // console.log('User-Agent:', userAgent);\n    if (this.hubConnection.state === 'Connected') {\n      this.hubConnection.invoke('OpenNewPage', this.userID, this.email, brwserInfo.toString()).catch(error => {\n        console.error('Error JoinPrivateChat:', error);\n      });\n    } else {\n      console.error('SignalR connection is not in the \"Connected\" state.');\n    }\n  }\n  leavePage() {\n    const brwserInfo = navigator.userAgent;\n    // console.log('User-Agent:', userAgent);\n    this.hubConnection.invoke('LeavePage', this.userID, brwserInfo.toString());\n  }\n  logOut() {\n    const brwserInfo = navigator.userAgent;\n    // console.log('User-Agent:', userAgent);\n    if (this.hubConnection.state === 'Connected') {\n      this.hubConnection.invoke('LeaveApplication', this.userID.toString(), \"1\", brwserInfo.toString()).catch(error => {\n        console.error('Error JoinPrivateChat:', error);\n      });\n    } else {\n      console.error('SignalR connection is not in the \"Connected\" state.');\n    }\n  }\n  static #_ = this.ɵfac = function SignalrService_Factory(t) {\n    return new (t || SignalrService)(i0.ɵɵinject(i1.ToastrService), i0.ɵɵinject(i2.UserContextService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SignalrService,\n    factory: SignalrService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["signalR","SignalrService","constructor","toastrService","userContextService","userID","user$","_value","id","email","hubConnection","HubConnectionBuilder","withUrl","skipNegotiation","transport","HttpTransportType","WebSockets","build","ngOnInit","_this","_asyncToGenerator","startSignalRConnection","error","console","openNewPage","brwserInfo","navigator","userAgent","state","invoke","toString","catch","leavePage","logOut","_","i0","ɵɵinject","i1","ToastrService","i2","UserContextService","_2","factory","ɵfac","providedIn"],"sources":["D:\\MailBox\\FrontEnd\\MailBox\\MailboxApp\\src\\app\\common\\signalr.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport * as signalR from '@microsoft/signalr';\nimport { UserContextService } from './user-context.service';\nimport { ToastrService } from 'ngx-toastr';\n@Injectable({\n  providedIn: 'root'\n})\nexport class SignalrService {\n  private userID: any;\n  private email: any;\n  private hubConnection: signalR.HubConnection;\n  constructor(\n    private toastrService: ToastrService,\n    private userContextService: UserContextService,\n  ) {\n    this.userID = this.userContextService.user$._value.id;\n    this.email = this.userContextService.user$._value.email\n    ;\n    this.hubConnection = new signalR.HubConnectionBuilder()\n      .withUrl('http://localhost:5261/mailHub', {\n        skipNegotiation: true,\n        transport: signalR.HttpTransportType.WebSockets\n      }).build();\n   }\n   async ngOnInit(): Promise<void>\n    {\n    // Call the API service function when the app component initializes\n      try\n       {\n      await this.startSignalRConnection();}\n      catch (error)\n       {\n        console.error('Error starting SignalR connection:', error)\n      }\n        // Handle connection startup errors here\n  }\n  \n   openNewPage(): void {\n    const brwserInfo = navigator.userAgent;\n    // console.log('User-Agent:', userAgent);\n    if (this.hubConnection.state === 'Connected') {\n      this.hubConnection.invoke('OpenNewPage', this.userID,this.email ,brwserInfo.toString()).catch((error) => {\n        console.error('Error JoinPrivateChat:', error);\n      });\n    } else {\n      console.error('SignalR connection is not in the \"Connected\" state.');\n    }\n  }\n  leavePage(): void {\n    const brwserInfo = navigator.userAgent;\n    // console.log('User-Agent:', userAgent);\n    this.hubConnection.invoke('LeavePage',this.userID ,brwserInfo.toString());\n  }\n  logOut(){\n    const brwserInfo = navigator.userAgent;\n    // console.log('User-Agent:', userAgent);\n    if (this.hubConnection.state === 'Connected') {\n      this.hubConnection.invoke('LeaveApplication', this.userID.toString(),\"1\", brwserInfo.toString()).catch((error) => {\n        console.error('Error JoinPrivateChat:', error);\n      });\n    } else {\n      console.error('SignalR connection is not in the \"Connected\" state.');\n    }\n  }\n}\n"],"mappings":";AACA,OAAO,KAAKA,OAAO,MAAM,oBAAoB;;;;AAM7C,OAAM,MAAOC,cAAc;EAIzBC,YACUC,aAA4B,EAC5BC,kBAAsC;IADtC,KAAAD,aAAa,GAAbA,aAAa;IACb,KAAAC,kBAAkB,GAAlBA,kBAAkB;IAE1B,IAAI,CAACC,MAAM,GAAG,IAAI,CAACD,kBAAkB,CAACE,KAAK,CAACC,MAAM,CAACC,EAAE;IACrD,IAAI,CAACC,KAAK,GAAG,IAAI,CAACL,kBAAkB,CAACE,KAAK,CAACC,MAAM,CAACE,KAAK;IAEvD,IAAI,CAACC,aAAa,GAAG,IAAIV,OAAO,CAACW,oBAAoB,EAAE,CACpDC,OAAO,CAAC,+BAA+B,EAAE;MACxCC,eAAe,EAAE,IAAI;MACrBC,SAAS,EAAEd,OAAO,CAACe,iBAAiB,CAACC;KACtC,CAAC,CAACC,KAAK,EAAE;EACb;EACMC,QAAQA,CAAA;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MAEb;MACE,IACC;QACD,MAAMD,KAAI,CAACE,sBAAsB,EAAE;OAAE,CACrC,OAAOC,KAAK,EACX;QACCC,OAAO,CAACD,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;;MAE1D;IAAA;EACN;;EAECE,WAAWA,CAAA;IACV,MAAMC,UAAU,GAAGC,SAAS,CAACC,SAAS;IACtC;IACA,IAAI,IAAI,CAACjB,aAAa,CAACkB,KAAK,KAAK,WAAW,EAAE;MAC5C,IAAI,CAAClB,aAAa,CAACmB,MAAM,CAAC,aAAa,EAAE,IAAI,CAACxB,MAAM,EAAC,IAAI,CAACI,KAAK,EAAEgB,UAAU,CAACK,QAAQ,EAAE,CAAC,CAACC,KAAK,CAAET,KAAK,IAAI;QACtGC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAChD,CAAC,CAAC;KACH,MAAM;MACLC,OAAO,CAACD,KAAK,CAAC,qDAAqD,CAAC;;EAExE;EACAU,SAASA,CAAA;IACP,MAAMP,UAAU,GAAGC,SAAS,CAACC,SAAS;IACtC;IACA,IAAI,CAACjB,aAAa,CAACmB,MAAM,CAAC,WAAW,EAAC,IAAI,CAACxB,MAAM,EAAEoB,UAAU,CAACK,QAAQ,EAAE,CAAC;EAC3E;EACAG,MAAMA,CAAA;IACJ,MAAMR,UAAU,GAAGC,SAAS,CAACC,SAAS;IACtC;IACA,IAAI,IAAI,CAACjB,aAAa,CAACkB,KAAK,KAAK,WAAW,EAAE;MAC5C,IAAI,CAAClB,aAAa,CAACmB,MAAM,CAAC,kBAAkB,EAAE,IAAI,CAACxB,MAAM,CAACyB,QAAQ,EAAE,EAAC,GAAG,EAAEL,UAAU,CAACK,QAAQ,EAAE,CAAC,CAACC,KAAK,CAAET,KAAK,IAAI;QAC/GC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAChD,CAAC,CAAC;KACH,MAAM;MACLC,OAAO,CAACD,KAAK,CAAC,qDAAqD,CAAC;;EAExE;EAAC,QAAAY,CAAA,G;qBAxDUjC,cAAc,EAAAkC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,aAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,kBAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAdxC,cAAc;IAAAyC,OAAA,EAAdzC,cAAc,CAAA0C,IAAA;IAAAC,UAAA,EAFb;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}